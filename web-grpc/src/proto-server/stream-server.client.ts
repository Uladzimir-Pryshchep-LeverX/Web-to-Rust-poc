// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "stream-server.proto" (package "stream_server", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Streamer } from "./stream-server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Message } from "./stream-server";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service stream_server.Streamer
 */
export interface IStreamerClient {
    /**
     * @generated from protobuf rpc: ServerStream(stream_server.Message) returns (stream stream_server.Message);
     */
    serverStream(input: Message, options?: RpcOptions): ServerStreamingCall<Message, Message>;
}
/**
 * @generated from protobuf service stream_server.Streamer
 */
export class StreamerClient implements IStreamerClient, ServiceInfo {
    typeName = Streamer.typeName;
    methods = Streamer.methods;
    options = Streamer.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ServerStream(stream_server.Message) returns (stream stream_server.Message);
     */
    serverStream(input: Message, options?: RpcOptions): ServerStreamingCall<Message, Message> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("serverStreaming", this._transport, method, opt, input);
    }
}
